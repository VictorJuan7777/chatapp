// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: message.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatappServer_Chatroom_FullMethodName = "/pb.chatapp_server/Chatroom"
)

// ChatappServerClient is the client API for ChatappServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatappServerClient interface {
	Chatroom(ctx context.Context, opts ...grpc.CallOption) (ChatappServer_ChatroomClient, error)
}

type chatappServerClient struct {
	cc grpc.ClientConnInterface
}

func NewChatappServerClient(cc grpc.ClientConnInterface) ChatappServerClient {
	return &chatappServerClient{cc}
}

func (c *chatappServerClient) Chatroom(ctx context.Context, opts ...grpc.CallOption) (ChatappServer_ChatroomClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatappServer_ServiceDesc.Streams[0], ChatappServer_Chatroom_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatappServerChatroomClient{stream}
	return x, nil
}

type ChatappServer_ChatroomClient interface {
	Send(*FromClient) error
	Recv() (*FromServer, error)
	grpc.ClientStream
}

type chatappServerChatroomClient struct {
	grpc.ClientStream
}

func (x *chatappServerChatroomClient) Send(m *FromClient) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatappServerChatroomClient) Recv() (*FromServer, error) {
	m := new(FromServer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatappServerServer is the server API for ChatappServer service.
// All implementations must embed UnimplementedChatappServerServer
// for forward compatibility
type ChatappServerServer interface {
	Chatroom(ChatappServer_ChatroomServer) error
	mustEmbedUnimplementedChatappServerServer()
}

// UnimplementedChatappServerServer must be embedded to have forward compatible implementations.
type UnimplementedChatappServerServer struct {
}

func (UnimplementedChatappServerServer) Chatroom(ChatappServer_ChatroomServer) error {
	return status.Errorf(codes.Unimplemented, "method Chatroom not implemented")
}
func (UnimplementedChatappServerServer) mustEmbedUnimplementedChatappServerServer() {}

// UnsafeChatappServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatappServerServer will
// result in compilation errors.
type UnsafeChatappServerServer interface {
	mustEmbedUnimplementedChatappServerServer()
}

func RegisterChatappServerServer(s grpc.ServiceRegistrar, srv ChatappServerServer) {
	s.RegisterService(&ChatappServer_ServiceDesc, srv)
}

func _ChatappServer_Chatroom_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatappServerServer).Chatroom(&chatappServerChatroomServer{stream})
}

type ChatappServer_ChatroomServer interface {
	Send(*FromServer) error
	Recv() (*FromClient, error)
	grpc.ServerStream
}

type chatappServerChatroomServer struct {
	grpc.ServerStream
}

func (x *chatappServerChatroomServer) Send(m *FromServer) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatappServerChatroomServer) Recv() (*FromClient, error) {
	m := new(FromClient)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatappServer_ServiceDesc is the grpc.ServiceDesc for ChatappServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatappServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.chatapp_server",
	HandlerType: (*ChatappServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chatroom",
			Handler:       _ChatappServer_Chatroom_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}
